// Generated by CoffeeScript 1.6.3
(function() {
  var BackgroundTracking, Map, Ui, serverHost, serverPort,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  serverHost = "http://secondline-server.herokuapp.com";

  serverPort = 80;

  Map = (function() {
    function Map() {
      var center;
      center = new google.maps.LatLng(29.9511782, -90.0689848);
      this.marker = null;
      this.map = new google.maps.Map(document.getElementById("map_canvas"), {
        disableDefaultUI: true,
        draggable: false,
        zoom: 15,
        center: center,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      });
    }

    Map.prototype.setPosition = function(lat, lng) {
      var position;
      if (this.marker != null) {
        this.marker.setMap(null);
        this.marker = null;
      }
      position = new google.maps.LatLng(lat, lng);
      this.marker = new google.maps.Marker({
        position: position,
        map: this.map,
        title: "position"
      });
      return this.map.setCenter(position);
    };

    return Map;

  })();

  Ui = (function() {
    function Ui() {
      this.onPosition = __bind(this.onPosition, this);
    }

    Ui.prototype.start = function() {
      this.map = new Map;
      this.socket = io.connect(serverHost, {
        transports: ["xhr-polling"],
        port: serverPort
      });
      this.socket.on("position", this.onPosition);
      return $("#position").text("Waiting for position..");
    };

    Ui.prototype.onPosition = function(position) {
      $("#position").html("Latitude: " + position.latitude + "<br/>\nLongitude: " + position.longitude);
      return this.map.setPosition(position.latitude, position.longitude);
    };

    return Ui;

  })();

  BackgroundTracking = (function() {
    function BackgroundTracking() {
      this.onFailure = __bind(this.onFailure, this);
      this.onPosition = __bind(this.onPosition, this);
      this.serverUrl = "" + serverHost + "/report.json";
      window.navigator.geolocation.getCurrentPosition(function() {});
      this.bgGeo = window.plugins.backgroundGeoLocation;
      this.bgGeo.configure(this.onPosition, this.onFailure, {
        url: this.serverUrl,
        desiredAccuracy: 0,
        stationaryRadius: 20,
        distanceFilter: 30
      });
    }

    BackgroundTracking.prototype.start = function() {
      return this.bgGeo.start();
    };

    BackgroundTracking.prototype.onPosition = function(position) {
      $.post(this.serverUrl, {
        location: position
      }, null, "json");
      return this.bgGeo.finish();
    };

    BackgroundTracking.prototype.onFailure = function(error) {
      return console.log("error", error);
    };

    return BackgroundTracking;

  })();

  window.Tracker = (function() {
    function Tracker() {
      this.onReady = __bind(this.onReady, this);
      document.addEventListener("deviceready", this.onReady, false);
    }

    Tracker.prototype.onReady = function() {
      this.ui = new Ui;
      this.tracking = new BackgroundTracking;
      this.ui.start();
      return this.tracking.start();
    };

    return Tracker;

  })();

}).call(this);
